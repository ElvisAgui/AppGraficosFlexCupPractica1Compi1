 /*Seccion codigo Imports Package */
package com.compiladores.graficoslexcup.analizadores;
import com.compiladores.graficoslexcup.objetos.*;
import com.compiladores.graficoslexcup.report.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;

/* Codigo java del parser*/
parser code {:

/*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*/
	
	private ArrayList<Grafica> graficas=new ArrayList<>();
	private Grafica grafica = new Grafica();
	private boolean errorRepeticion;
	private ArrayList<ErrorSinLex> errorsSinLexs = new ArrayList<>();
	private ContGraficos contGraficos;
	private ArrayList<Operation> operations = new ArrayList<>();
	private int contadorBarra = 0;
	private int contadorPie = 0;
	private ManejadorGraficos manejadorGraficos = new ManejadorGraficos();
	private ArrayList<String> listGraficasEjecucion = new ArrayList<>();

	 /* Connect this parser to a scanner!*/
	public parser(LexerAnalysis analizadorLexico) {
		super(analizadorLexico);
	}

	

	/*
	*apartado de getters
	*/
	public ContGraficos getContGraficos(){
		return contGraficos;
	}

	public  ArrayList<String>  getListGraficasEjecucion(){
		return listGraficasEjecucion;
	}

	public ArrayList<Operation> getOperations() {
    	return operations;
    }

	public ArrayList<Grafica> getGraficas() {
    	return graficas;
    }
	
	public ArrayList<ErrorSinLex> getErrorsSinLexs() {
    	return errorsSinLexs;
    }

	public String limpiarLexeme(String lexeme){
		return lexeme = lexeme.replace("\"", "");
	}

	/*
	*apartado para manejo de errores
	*/

	public void reportError(String tipo){
		if(errorRepeticion){
			try{
				//reportar error repeticion 
				String descripcion = "este elemento esta repetido: "+tipo;
				errorsSinLexs.add(new ErrorSinLex("------",0,0,descripcion, true));
				errorRepeticion = false;
			}catch(Exception e){
				e.printStackTrace();
			}
			
		}
	}
	/*error de repeticion de elementeo regitrado en este */
	public void reportErrorElementFaltante(String tipo){
		if(errorRepeticion){
			try{
				//reportar error repeticion 
				String descripcion = "Grafica con datos faltantes en grafica o datos Repetidos: "+tipo;
				errorsSinLexs.add(new ErrorSinLex("----",0,0, descripcion, true));
				errorRepeticion = false;
			}catch(Exception e){
				e.printStackTrace();
			}
			
		}
	}
	/*error de sintays son reflejados aqui y guardados*/
	@Override
        public void syntax_error(Symbol tok) {
			try{
				Token token = (Token) tok.value;
				report_error("Error Sintactico con el  Token:"+ token.getLexeme()+" este no pertenece a la estructura - linea: "+token.getLine()+" - columna: "+token.getColumn() + "\n",null);
				String descripcion = "Se esperaba ";
				errorsSinLexs.add(new ErrorSinLex(token.getLexeme(), token.getLine(), token.getColumn(), descripcion, true));
			}catch(Exception e){
					e.printStackTrace();
			}
			
		}
	
:};


/*seccion de Terminales*/

terminal Token MENOS, MAS, POR, DIVISION, PARENTESISA, PARENTESISC, LLAVEA, LLAVEC, CORCHETEA, CORCHETEC ;
terminal Token COMA, PUNTOCOMA, DOPUNTO, NUMERO, DECIMAL, DEF, BARRAS, PIE, TITULO, EJEX, EJEY, ETIQUETAS, VALORES, CANTIDAD;
terminal Token PORCENTAJE, UNIR, TIPO, TOTAL, EXTRA, EJECUTAR, IDD;


/*seccion de No Terminales*/

non terminal q_inicial, comodin_a, comodin_b, a_barra, b_pie, title, y_eje, unir, x_eje, val, etiquet, p_tipo, f_ejecutar, n_consecutivos, i_tems, l_total, r_extra, h_tupla; 
non terminal Integer operation;
non terminal Double o_decimal;


/* agregado de precedencias */

precedence left MENOS, MAS;
precedence left POR, DIVISION;

/* seccion de Gramatica : */

start with  q_inicial;

/*General Gramatica*/
 q_inicial ::= DEF BARRAS LLAVEA comodin_a LLAVEC  q_inicial		{::}
	| DEF PIE LLAVEA comodin_b LLAVEC  q_inicial					{::}
	| DEF PIE LLAVEA comodin_b LLAVEC f_ejecutar 					{::}
	| DEF BARRAS LLAVEA comodin_a LLAVEC f_ejecutar				    {::}
	| error															{:/* capturar error @overide, recuperacion*/:}
	;

comodin_a ::= a_barra {:try{graficas.add(new Barra(grafica.getTitulo(),grafica.getTuplas(),grafica.getItems(),grafica.getValores())); grafica.limpiarGrafica(); contadorBarra++; }catch(Exception e){e.printStackTrace();}:}
; 
/*Estructura A*/
a_barra ::= title a_barra	{:reportError("Titulo");:} 
	| y_eje a_barra			{:reportError("ejey"); :}
	| unir a_barra			{:reportError("unir"); :}
	| x_eje a_barra			{:reportError("ejex"); :}
	| error a_barra			{:/* capturar error @overide, recuperacion*/:}
	|						{:errorRepeticion = !grafica.veriricaionElementosBarra(); reportErrorElementFaltante("Barra"); :}
	;

comodin_b ::= b_pie {:try{graficas.add(new Pie(grafica.getTitulo(),grafica.getEsCantidad(), grafica.getTotal(), grafica.getExtra(), grafica.getTuplas(), grafica.getItems(),grafica.getValores())); grafica.limpiarGrafica(); contadorPie++;}catch(Exception e){e.printStackTrace();}:}
; 

/*Estructura B*/
b_pie ::= title b_pie	{:reportError("Titulo");:}
	| p_tipo b_pie		{:reportError("tipo");:}
	| etiquet b_pie		{:reportError("etiqueta");:}
	| val b_pie			{:reportError("valores");:}
	| l_total b_pie		{:reportError("total");:}
	| unir b_pie		{:reportError("Unir");:}
	| r_extra b_pie		{:reportError("Extra");:}
	| error	b_pie		{:/* capturar error @overide, recuperacion*/:}
	|					{:errorRepeticion = !grafica.veriricaionElementosPie(); reportErrorElementFaltante("Pie");:}
	;

/*Gramatica Etiquetas*/
etiquet ::= ETIQUETAS DOPUNTO CORCHETEA i_tems CORCHETEC PUNTOCOMA		
{:errorRepeticion = !grafica.controItems();:}
	;

/*Gramatica valores*/
val ::= VALORES DOPUNTO CORCHETEA n_consecutivos CORCHETEC PUNTOCOMA		
{:errorRepeticion = !grafica.controValores();;:}
	;

/*Gramatica Unir*/
unir ::= UNIR DOPUNTO CORCHETEA h_tupla CORCHETEC PUNTOCOMA		{:errorRepeticion =! grafica.controTuplas();:}
	;

/*Gramatica H*/
h_tupla ::= LLAVEA operation:valor1 COMA operation:valor2 LLAVEC  COMA  h_tupla		{:try{grafica.getTuplas().add(new Tupla(valor1, valor2));}catch(Exception e){e.printStackTrace();}:}
	| LLAVEA operation:valor1 COMA operation:valor2 LLAVEC 							{:try{grafica.getTuplas().add(new Tupla(valor1, valor2));}catch(Exception e){e.printStackTrace();}:}
	| error	h_tupla 																{:/* capturar error @overide, recuperacion*/:}
	;

/*Gramatica Total*/
l_total ::= TOTAL DOPUNTO o_decimal:numTotal PUNTOCOMA				{:errorRepeticion = !grafica.controlTotal(); grafica.setTotal(numTotal.doubleValue());:}
	;

/*Gramatica Titulo*/
title ::= TITULO DOPUNTO  IDD:titulo PUNTOCOMA 	{:try{errorRepeticion = !grafica.controTitle(); grafica.setTitulo(limpiarLexeme(titulo.getLexeme()));}catch(Exception e){e.printStackTrace();}:}
;

/*Gramatica Eje Y*/
y_eje ::= EJEY DOPUNTO CORCHETEA n_consecutivos CORCHETEC PUNTOCOMA		{:try{errorRepeticion = !grafica.controValores();  System.out.println("agregando valores"+grafica.getValores().get(0));}catch(Exception e){e.printStackTrace();}:}
	;

/*Gramatica Eje X*/
x_eje ::= EJEX DOPUNTO CORCHETEA i_tems CORCHETEC PUNTOCOMA		{:try{errorRepeticion = !grafica.controItems();  System.out.println("agregando items "+ grafica.getItems().get(0));}catch(Exception e){e.printStackTrace();}:}
	;
	
/*Gramatica Extra*/
r_extra ::= EXTRA DOPUNTO   IDD:extra  PUNTOCOMA    			{:try{errorRepeticion = !grafica.controExtra(); grafica.setExtra(limpiarLexeme(extra.getLexeme()));}catch(Exception e){e.printStackTrace();}:}	
	;

/*Gramatica Tipo*/
p_tipo ::= TIPO DOPUNTO PORCENTAJE PUNTOCOMA			{:try{errorRepeticion = grafica.controlTipo(); grafica.setEsCantidad(false); grafica.setYaTipo(true);}catch(Exception e){e.printStackTrace();}:}
	| TIPO DOPUNTO CANTIDAD PUNTOCOMA					{:try{errorRepeticion = grafica.controlTipo(); grafica.setEsCantidad(true); grafica.setYaTipo(true);}catch(Exception e){e.printStackTrace();}:}
	;

/*Gramatica Numeros consecutivos*/
n_consecutivos ::= o_decimal:numero COMA n_consecutivos			{:try{grafica.getValores().add(numero.doubleValue());}catch(Exception e){e.printStackTrace();}:}
	| o_decimal:numero											{:try{grafica.getValores().add(numero.doubleValue());}catch(Exception e){e.printStackTrace();}:}
	;

/*Gramatica Items consecutivos*/
i_tems ::=   IDD:item COMA i_tems 		{:try{grafica.getItems().add(limpiarLexeme(item.getLexeme()));}catch(Exception e){e.printStackTrace();}:}
	|   IDD:item 						{:try{grafica.getItems().add(limpiarLexeme(item.getLexeme()));}catch(Exception e){e.printStackTrace();}:}
	| error i_tems						{:/* capturar error @overide, recuperacion*/:}
	;

/*Gramatica para Ejecucion Finality*/
f_ejecutar ::= EJECUTAR PARENTESISA  IDD:titulo  PARENTESISC PUNTOCOMA f_ejecutar 	{:try{listGraficasEjecucion.add(limpiarLexeme(titulo.getLexeme()));}catch(Exception e){e.printStackTrace();} :}
	| 																				{:try{contGraficos = new ContGraficos(contadorBarra, contadorPie); grafica.unionErroresLexiconConSintacticos(LexerAnalysis.errorsSinLexs,errorsSinLexs );}catch(Exception e){e.printStackTrace();}:}
	;

/*Gramatica de operacion aritmetica*/
operation ::= operation:numero1 MAS:operador operation:numero2		{:try{RESULT = new Integer(numero1.intValue()+numero2.intValue()); operations.add(new Suma("SUMA",operador.getLine(),operador.getColumn(),String.valueOf(numero1+"+"+numero2)));}catch(Exception e){e.printStackTrace();}:}
	| operation:numero1 MENOS:operador operation:numero2			{:try{RESULT = new Integer(numero1.intValue()-numero2.intValue()); operations.add(new Resta("RESTA",operador.getLine(),operador.getColumn(),String.valueOf(numero1+"-"+numero2)));         }catch(Exception e){e.printStackTrace();}:}
	| operation:numero1 POR:operador operation:numero2				{:try{RESULT = new Integer(numero1.intValue()*numero2.intValue()); operations.add(new Multiplicacion("MULTIPLICACION",operador.getLine(),operador.getColumn(),String.valueOf(numero1+"/"+numero2)));}catch(Exception e){e.printStackTrace();}:}
	| operation:numero1 DIVISION:operador operation:numero2			{:try{RESULT = new Integer(numero1.intValue()/numero2.intValue()); operations.add(new Division("DIVISION",operador.getLine(),operador.getColumn(),String.valueOf(numero1+"*"+numero2)));      }catch(Exception e){e.printStackTrace();}:}
	| NUMERO:num													{:try{RESULT = Integer.valueOf( num.getLexeme());}catch(Exception e){e.printStackTrace();}:}
	| PARENTESISA operation:operacion PARENTESISC					{:try{RESULT = operacion;}catch(Exception e){e.printStackTrace();}:}
	| error operation	  													{:/*error */:}
	;
/*operacion con decimales*/
o_decimal ::= o_decimal:numero1 MAS:operador o_decimal:numero2		{:try{RESULT = new Double(numero1.doubleValue()+numero2.doubleValue()); operations.add(new Suma("SUMA",operador.getLine(),operador.getColumn(),String.valueOf(numero1+"+"+numero2)));}catch(Exception e){e.printStackTrace();}:}
	| o_decimal:numero1 MENOS:operador o_decimal:numero2			{:try{RESULT = new Double(numero1.doubleValue()-numero2.doubleValue()); operations.add(new Resta("RESTA",operador.getLine(),operador.getColumn(),String.valueOf(numero1+"-"+numero2)));}catch(Exception e){e.printStackTrace();}:}
	| o_decimal:numero1 POR:operador o_decimal:numero2				{:try{RESULT = new Double(numero1.doubleValue()*numero2.doubleValue()); operations.add(new Multiplicacion("MULTIPLICACION",operador.getLine(),operador.getColumn(),String.valueOf(numero1+"*"+numero2)));}catch(Exception e){e.printStackTrace();}:}
	| o_decimal:numero1 DIVISION:operador o_decimal:numero2			{:try{RESULT = new Double(numero1.doubleValue()/numero2.doubleValue()); operations.add(new Division("DIVISION",operador.getLine(),operador.getColumn(),String.valueOf(numero1+"/"+numero2)));}catch(Exception e){e.printStackTrace();}:}
	| NUMERO:num													{:try{RESULT = Double.valueOf( num.getLexeme());}catch(Exception e){e.printStackTrace();}:}
	| DECIMAL:num													{:try{RESULT = Double.valueOf( num.getLexeme());}catch(Exception e){e.printStackTrace();}:}
	| PARENTESISA o_decimal:operacion PARENTESISC					{:try{RESULT = operacion;}catch(Exception e){e.printStackTrace();}:}
	| error o_decimal 														{::}
	;