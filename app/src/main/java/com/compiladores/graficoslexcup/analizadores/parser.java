
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.compiladores.graficoslexcup.analizadores;

import com.compiladores.graficoslexcup.objetos.*;
import com.compiladores.graficoslexcup.report.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\072\000\002\002\004\000\002\002\010\000\002\002" +
    "\010\000\002\002\010\000\002\002\010\000\002\002\003" +
    "\000\002\003\003\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\005\004\000\002\005\004\000\002" +
    "\005\002\000\002\004\003\000\002\006\004\000\002\006" +
    "\004\000\002\006\004\000\002\006\004\000\002\006\004" +
    "\000\002\006\004\000\002\006\004\000\002\006\004\000" +
    "\002\006\002\000\002\014\010\000\002\013\010\000\002" +
    "\011\010\000\002\023\011\000\002\023\007\000\002\023" +
    "\004\000\002\021\006\000\002\007\006\000\002\010\010" +
    "\000\002\012\010\000\002\022\006\000\002\015\006\000" +
    "\002\015\006\000\002\017\005\000\002\017\003\000\002" +
    "\020\005\000\002\020\003\000\002\020\004\000\002\016" +
    "\010\000\002\016\002\000\002\024\005\000\002\024\005" +
    "\000\002\024\005\000\002\024\005\000\002\024\003\000" +
    "\002\024\005\000\002\024\004\000\002\025\005\000\002" +
    "\025\005\000\002\025\005\000\002\025\005\000\002\025" +
    "\003\000\002\025\003\000\002\025\005\000\002\025\004" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\221\000\006\003\004\023\005\001\002\000\004\002" +
    "\ufffc\001\002\000\006\024\010\025\011\001\002\000\004" +
    "\002\007\001\002\000\004\002\001\001\002\000\004\012" +
    "\170\001\002\000\004\012\012\001\002\000\024\003\024" +
    "\013\uffeb\026\015\031\030\032\022\035\027\036\025\037" +
    "\021\040\033\001\002\000\024\003\024\013\uffeb\026\015" +
    "\031\030\032\022\035\027\036\025\037\021\040\033\001" +
    "\002\000\004\013\ufff4\001\002\000\004\020\164\001\002" +
    "\000\024\003\024\013\uffeb\026\015\031\030\032\022\035" +
    "\027\036\025\037\021\040\033\001\002\000\024\003\024" +
    "\013\uffeb\026\015\031\030\032\022\035\027\036\025\037" +
    "\021\040\033\001\002\000\024\003\024\013\uffeb\026\015" +
    "\031\030\032\022\035\027\036\025\037\021\040\033\001" +
    "\002\000\004\020\156\001\002\000\004\020\127\001\002" +
    "\000\004\013\116\001\002\000\024\003\024\013\uffeb\026" +
    "\015\031\030\032\022\035\027\036\025\037\021\040\033" +
    "\001\002\000\004\020\110\001\002\000\024\003\024\013" +
    "\uffeb\026\015\031\030\032\022\035\027\036\025\037\021" +
    "\040\033\001\002\000\004\020\053\001\002\000\004\020" +
    "\041\001\002\000\024\003\024\013\uffeb\026\015\031\030" +
    "\032\022\035\027\036\025\037\021\040\033\001\002\000" +
    "\024\003\024\013\uffeb\026\015\031\030\032\022\035\027" +
    "\036\025\037\021\040\033\001\002\000\004\020\034\001" +
    "\002\000\004\042\035\001\002\000\004\017\036\001\002" +
    "\000\024\003\uffe0\013\uffe0\026\uffe0\031\uffe0\032\uffe0\035" +
    "\uffe0\036\uffe0\037\uffe0\040\uffe0\001\002\000\004\013\uffee" +
    "\001\002\000\004\013\ufff2\001\002\000\004\014\042\001" +
    "\002\000\006\003\043\042\045\001\002\000\006\003\043" +
    "\042\045\001\002\000\004\015\050\001\002\000\006\015" +
    "\uffda\016\046\001\002\000\006\003\043\042\045\001\002" +
    "\000\004\015\uffdb\001\002\000\004\017\051\001\002\000" +
    "\024\003\uffea\013\uffea\026\uffea\031\uffea\032\uffea\035\uffea" +
    "\036\uffea\037\uffea\040\uffea\001\002\000\004\015\uffd9\001" +
    "\002\000\004\014\054\001\002\000\006\003\055\012\056" +
    "\001\002\000\006\003\055\012\056\001\002\000\010\003" +
    "\064\010\065\021\062\001\002\000\004\015\060\001\002" +
    "\000\004\017\061\001\002\000\030\003\uffe8\013\uffe8\026" +
    "\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\035\uffe8\036\uffe8" +
    "\037\uffe8\040\uffe8\001\002\000\020\004\uffd2\005\uffd2\006" +
    "\uffd2\007\uffd2\011\uffd2\013\uffd2\016\uffd2\001\002\000\014" +
    "\004\071\005\067\006\073\007\072\016\101\001\002\000" +
    "\010\003\064\010\065\021\062\001\002\000\010\003\064" +
    "\010\065\021\062\001\002\000\014\004\071\005\067\006" +
    "\073\007\072\011\070\001\002\000\010\003\064\010\065" +
    "\021\062\001\002\000\020\004\uffd1\005\uffd1\006\uffd1\007" +
    "\uffd1\011\uffd1\013\uffd1\016\uffd1\001\002\000\010\003\064" +
    "\010\065\021\062\001\002\000\010\003\064\010\065\021" +
    "\062\001\002\000\010\003\064\010\065\021\062\001\002" +
    "\000\020\004\uffd4\005\uffd4\006\uffd4\007\uffd4\011\uffd4\013" +
    "\uffd4\016\uffd4\001\002\000\020\004\uffd3\005\uffd3\006\uffd3" +
    "\007\uffd3\011\uffd3\013\uffd3\016\uffd3\001\002\000\020\004" +
    "\uffd5\005\uffd5\006\073\007\072\011\uffd5\013\uffd5\016\uffd5" +
    "\001\002\000\020\004\uffd6\005\uffd6\006\073\007\072\011" +
    "\uffd6\013\uffd6\016\uffd6\001\002\000\020\004\071\005\067" +
    "\006\073\007\072\011\uffd0\013\uffd0\016\uffd0\001\002\000" +
    "\010\003\064\010\065\021\062\001\002\000\014\004\071" +
    "\005\067\006\073\007\072\013\103\001\002\000\006\015" +
    "\uffe6\016\104\001\002\000\006\003\055\012\056\001\002" +
    "\000\004\015\uffe7\001\002\000\004\015\uffe5\001\002\000" +
    "\004\013\ufff3\001\002\000\006\033\111\034\112\001\002" +
    "\000\004\017\114\001\002\000\004\017\113\001\002\000" +
    "\024\003\uffdf\013\uffdf\026\uffdf\031\uffdf\032\uffdf\035\uffdf" +
    "\036\uffdf\037\uffdf\040\uffdf\001\002\000\024\003\uffde\013" +
    "\uffde\026\uffde\031\uffde\032\uffde\035\uffde\036\uffde\037\uffde" +
    "\040\uffde\001\002\000\004\013\uffec\001\002\000\012\002" +
    "\uffd7\003\004\023\005\041\120\001\002\000\004\002\ufffe" +
    "\001\002\000\004\010\122\001\002\000\004\002\uffff\001" +
    "\002\000\004\042\123\001\002\000\004\011\124\001\002" +
    "\000\004\017\125\001\002\000\006\002\uffd7\041\120\001" +
    "\002\000\004\002\uffd8\001\002\000\004\014\130\001\002" +
    "\000\012\003\133\010\134\021\131\022\135\001\002\000" +
    "\022\004\uffcb\005\uffcb\006\uffcb\007\uffcb\011\uffcb\015\uffcb" +
    "\016\uffcb\017\uffcb\001\002\000\016\004\145\005\142\006" +
    "\146\007\144\015\uffdc\016\154\001\002\000\012\003\133" +
    "\010\134\021\131\022\135\001\002\000\012\003\133\010" +
    "\134\021\131\022\135\001\002\000\022\004\uffca\005\uffca" +
    "\006\uffca\007\uffca\011\uffca\015\uffca\016\uffca\017\uffca\001" +
    "\002\000\004\015\137\001\002\000\004\017\140\001\002" +
    "\000\024\003\uffe9\013\uffe9\026\uffe9\031\uffe9\032\uffe9\035" +
    "\uffe9\036\uffe9\037\uffe9\040\uffe9\001\002\000\014\004\145" +
    "\005\142\006\146\007\144\011\143\001\002\000\012\003" +
    "\133\010\134\021\131\022\135\001\002\000\022\004\uffc9" +
    "\005\uffc9\006\uffc9\007\uffc9\011\uffc9\015\uffc9\016\uffc9\017" +
    "\uffc9\001\002\000\012\003\133\010\134\021\131\022\135" +
    "\001\002\000\012\003\133\010\134\021\131\022\135\001" +
    "\002\000\012\003\133\010\134\021\131\022\135\001\002" +
    "\000\022\004\uffcd\005\uffcd\006\uffcd\007\uffcd\011\uffcd\015" +
    "\uffcd\016\uffcd\017\uffcd\001\002\000\022\004\uffce\005\uffce" +
    "\006\146\007\144\011\uffce\015\uffce\016\uffce\017\uffce\001" +
    "\002\000\022\004\uffcc\005\uffcc\006\uffcc\007\uffcc\011\uffcc" +
    "\015\uffcc\016\uffcc\017\uffcc\001\002\000\022\004\uffcf\005" +
    "\uffcf\006\146\007\144\011\uffcf\015\uffcf\016\uffcf\017\uffcf" +
    "\001\002\000\022\004\145\005\142\006\146\007\144\011" +
    "\uffc8\015\uffc8\016\uffc8\017\uffc8\001\002\000\012\003\133" +
    "\010\134\021\131\022\135\001\002\000\004\015\uffdd\001" +
    "\002\000\012\003\133\010\134\021\131\022\135\001\002" +
    "\000\014\004\145\005\142\006\146\007\144\017\160\001" +
    "\002\000\024\003\uffe4\013\uffe4\026\uffe4\031\uffe4\032\uffe4" +
    "\035\uffe4\036\uffe4\037\uffe4\040\uffe4\001\002\000\004\013" +
    "\uffef\001\002\000\004\013\uffed\001\002\000\004\013\ufff0" +
    "\001\002\000\004\042\165\001\002\000\004\017\166\001" +
    "\002\000\030\003\uffe3\013\uffe3\026\uffe3\027\uffe3\030\uffe3" +
    "\031\uffe3\032\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\001" +
    "\002\000\004\013\ufff1\001\002\000\016\003\176\013\ufff5" +
    "\026\015\027\172\030\171\035\027\001\002\000\004\020" +
    "\217\001\002\000\004\020\212\001\002\000\016\003\176" +
    "\013\ufff5\026\015\027\172\030\171\035\027\001\002\000" +
    "\016\003\176\013\ufff5\026\015\027\172\030\171\035\027" +
    "\001\002\000\004\013\205\001\002\000\016\003\176\013" +
    "\ufff5\026\015\027\172\030\171\035\027\001\002\000\016" +
    "\003\176\013\ufff5\026\015\027\172\030\171\035\027\001" +
    "\002\000\004\013\ufffb\001\002\000\016\003\176\013\ufff5" +
    "\026\015\027\172\030\171\035\027\001\002\000\004\013" +
    "\ufff8\001\002\000\004\013\ufffa\001\002\000\004\013\ufff6" +
    "\001\002\000\012\002\uffd7\003\004\023\005\041\120\001" +
    "\002\000\004\002\ufffd\001\002\000\004\002\000\001\002" +
    "\000\004\013\ufff7\001\002\000\004\013\ufff9\001\002\000" +
    "\004\014\213\001\002\000\006\003\043\042\045\001\002" +
    "\000\004\015\215\001\002\000\004\017\216\001\002\000" +
    "\016\003\uffe1\013\uffe1\026\uffe1\027\uffe1\030\uffe1\035\uffe1" +
    "\001\002\000\004\014\220\001\002\000\012\003\133\010" +
    "\134\021\131\022\135\001\002\000\004\015\222\001\002" +
    "\000\004\017\223\001\002\000\016\003\uffe2\013\uffe2\026" +
    "\uffe2\027\uffe2\030\uffe2\035\uffe2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\221\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\004\022\006\013\007" +
    "\025\011\031\013\015\014\012\015\030\021\017\022\016" +
    "\001\001\000\022\006\166\007\025\011\031\013\015\014" +
    "\012\015\030\021\017\022\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\006\162\007\025\011\031\013" +
    "\015\014\012\015\030\021\017\022\016\001\001\000\022" +
    "\006\161\007\025\011\031\013\015\014\012\015\030\021" +
    "\017\022\016\001\001\000\022\006\160\007\025\011\031" +
    "\013\015\014\012\015\030\021\017\022\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\006\114\007\025\011\031\013\015\014\012\015\030\021" +
    "\017\022\016\001\001\000\002\001\001\000\022\006\106" +
    "\007\025\011\031\013\015\014\012\015\030\021\017\022" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\006\037\007\025\011\031\013\015\014\012\015\030\021" +
    "\017\022\016\001\001\000\022\006\036\007\025\011\031" +
    "\013\015\014\012\015\030\021\017\022\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\043\001\001\000\004\020\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\056\001" +
    "\001\000\004\023\105\001\001\000\004\024\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\077\001\001" +
    "\000\004\024\065\001\001\000\002\001\001\000\004\024" +
    "\076\001\001\000\002\001\001\000\004\024\075\001\001" +
    "\000\004\024\074\001\001\000\004\024\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\002" +
    "\120\016\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\125\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\017\135\025\131\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\152\001\001" +
    "\000\004\025\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\151\001\001\000\002\001\001\000\004\025" +
    "\150\001\001\000\004\025\147\001\001\000\004\025\146" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\154" +
    "\025\131\001\001\000\002\001\001\000\004\025\156\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\174\005\177\007\176\010\172\011\200\012\173\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\005\210" +
    "\007\176\010\172\011\200\012\173\001\001\000\014\005" +
    "\207\007\176\010\172\011\200\012\173\001\001\000\002" +
    "\001\001\000\014\005\203\007\176\010\172\011\200\012" +
    "\173\001\001\000\014\005\202\007\176\010\172\011\200" +
    "\012\173\001\001\000\002\001\001\000\014\005\201\007" +
    "\176\010\172\011\200\012\173\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\002\206\016" +
    "\205\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\213\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\220\025\131\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




/*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*/
	
	private ArrayList<Grafica> graficas=new ArrayList<>();
	private Grafica grafica = new Grafica();
	private boolean errorRepeticion;
	private ArrayList<ErrorSinLex> errorsSinLexs = new ArrayList<>();
	private ContGraficos contGraficos;
	private ArrayList<Operation> operations = new ArrayList<>();
	private int contadorBarra = 0;
	private int contadorPie = 0;
	private ManejadorGraficos manejadorGraficos = new ManejadorGraficos();
	private ArrayList<String> listGraficasEjecucion = new ArrayList<>();

	 /* Connect this parser to a scanner!*/
	public parser(LexerAnalysis analizadorLexico) {
		super(analizadorLexico);
	}

	

	/*
	*apartado de getters
	*/
	public ContGraficos getContGraficos(){
		return contGraficos;
	}

	public  ArrayList<String>  getListGraficasEjecucion(){
		return listGraficasEjecucion;
	}

	public ArrayList<Operation> getOperations() {
    	return operations;
    }

	public ArrayList<Grafica> getGraficas() {
    	return graficas;
    }
	
	public ArrayList<ErrorSinLex> getErrorsSinLexs() {
    	return errorsSinLexs;
    }

	public String limpiarLexeme(String lexeme){
		return lexeme = lexeme.replace("\"", "");
	}

	/*
	*apartado para manejo de errores
	*/

	public void reportError(String tipo){
		if(errorRepeticion){
			try{
				//reportar error repeticion 
				String descripcion = "este elemento esta repetido: "+tipo;
				errorsSinLexs.add(new ErrorSinLex("error de repeticion o dato faltante ",0,0,descripcion, true));
				errorRepeticion = false;
			}catch(Exception e){
				e.printStackTrace();
			}
			
		}
	}
	/*error de repeticion de elementeo regitrado en este */
	public void reportErrorElementFaltante(String tipo){
		if(errorRepeticion){
			try{
				//reportar error repeticion 
				String descripcion = "Grafica con datos faltantes en grafica: "+tipo;
				errorsSinLexs.add(new ErrorSinLex("erro repeticion o dato faltante",0,0, descripcion, true));
				errorRepeticion = false;
			}catch(Exception e){
				e.printStackTrace();
			}
			
		}
	}
	/*error de sintays son reflejados aqui y guardados*/
	@Override
        public void syntax_error(Symbol tok) {
			try{
				Token token = (Token) tok.value;
				report_error("Error Sintactico con el  Token:"+ token.getLexeme()+" este no pertenece a la estructura - linea: "+token.getLine()+" - columna: "+token.getColumn() + "\n",null);
				String descripcion = "Se esperaba ";
				errorsSinLexs.add(new ErrorSinLex(token.getLexeme(), token.getLine(), token.getColumn(), descripcion, true));
			}catch(Exception e){
					e.printStackTrace();
			}
			
		}
	


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= q_inicial EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // q_inicial ::= DEF BARRAS LLAVEA comodin_a LLAVEC q_inicial 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("q_inicial",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // q_inicial ::= DEF PIE LLAVEA comodin_b LLAVEC q_inicial 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("q_inicial",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // q_inicial ::= DEF PIE LLAVEA comodin_b LLAVEC f_ejecutar 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("q_inicial",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // q_inicial ::= DEF BARRAS LLAVEA comodin_a LLAVEC f_ejecutar 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("q_inicial",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // q_inicial ::= error 
            {
              Object RESULT =null;
		/* capturar error @overide, recuperacion*/
              CUP$parser$result = parser.getSymbolFactory().newSymbol("q_inicial",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // comodin_a ::= a_barra 
            {
              Object RESULT =null;
		try{graficas.add(new Barra(grafica.getTitulo(),grafica.getTuplas(),grafica.getItems(),grafica.getValores())); grafica.limpiarGrafica(); contadorBarra++; }catch(Exception e){e.printStackTrace();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodin_a",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // a_barra ::= title a_barra 
            {
              Object RESULT =null;
		reportError("Titulo");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a_barra",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // a_barra ::= y_eje a_barra 
            {
              Object RESULT =null;
		reportError("ejey"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a_barra",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // a_barra ::= unir a_barra 
            {
              Object RESULT =null;
		reportError("unir"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a_barra",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // a_barra ::= x_eje a_barra 
            {
              Object RESULT =null;
		reportError("ejex"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a_barra",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // a_barra ::= error a_barra 
            {
              Object RESULT =null;
		/* capturar error @overide, recuperacion*/
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a_barra",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // a_barra ::= 
            {
              Object RESULT =null;
		errorRepeticion = !grafica.veriricaionElementosBarra(); reportErrorElementFaltante("Barra"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a_barra",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // comodin_b ::= b_pie 
            {
              Object RESULT =null;
		try{graficas.add(new Pie(grafica.getTitulo(),grafica.getEsCantidad(), grafica.getTotal(), grafica.getExtra(), grafica.getTuplas(), grafica.getItems(),grafica.getValores())); grafica.limpiarGrafica(); contadorPie++;}catch(Exception e){e.printStackTrace();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodin_b",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // b_pie ::= title b_pie 
            {
              Object RESULT =null;
		reportError("Titulo");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("b_pie",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // b_pie ::= p_tipo b_pie 
            {
              Object RESULT =null;
		reportError("tipo");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("b_pie",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // b_pie ::= etiquet b_pie 
            {
              Object RESULT =null;
		reportError("etiqueta");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("b_pie",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // b_pie ::= val b_pie 
            {
              Object RESULT =null;
		reportError("valores");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("b_pie",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // b_pie ::= l_total b_pie 
            {
              Object RESULT =null;
		reportError("total");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("b_pie",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // b_pie ::= unir b_pie 
            {
              Object RESULT =null;
		reportError("Unir");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("b_pie",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // b_pie ::= r_extra b_pie 
            {
              Object RESULT =null;
		reportError("Extra");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("b_pie",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // b_pie ::= error b_pie 
            {
              Object RESULT =null;
		/* capturar error @overide, recuperacion*/
              CUP$parser$result = parser.getSymbolFactory().newSymbol("b_pie",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // b_pie ::= 
            {
              Object RESULT =null;
		errorRepeticion = !grafica.veriricaionElementosPie(); reportErrorElementFaltante("Pie");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("b_pie",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // etiquet ::= ETIQUETAS DOPUNTO CORCHETEA i_tems CORCHETEC PUNTOCOMA 
            {
              Object RESULT =null;
		errorRepeticion = !grafica.controItems();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquet",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // val ::= VALORES DOPUNTO CORCHETEA n_consecutivos CORCHETEC PUNTOCOMA 
            {
              Object RESULT =null;
		errorRepeticion = !grafica.controValores();;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // unir ::= UNIR DOPUNTO CORCHETEA h_tupla CORCHETEC PUNTOCOMA 
            {
              Object RESULT =null;
		errorRepeticion =! grafica.controTuplas();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unir",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // h_tupla ::= LLAVEA operation COMA operation LLAVEC COMA h_tupla 
            {
              Object RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer valor1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer valor2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		try{grafica.getTuplas().add(new Tupla(valor1, valor2));}catch(Exception e){e.printStackTrace();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("h_tupla",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // h_tupla ::= LLAVEA operation COMA operation LLAVEC 
            {
              Object RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer valor1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer valor2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		try{grafica.getTuplas().add(new Tupla(valor1, valor2));}catch(Exception e){e.printStackTrace();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("h_tupla",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // h_tupla ::= error h_tupla 
            {
              Object RESULT =null;
		/* capturar error @overide, recuperacion*/
              CUP$parser$result = parser.getSymbolFactory().newSymbol("h_tupla",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // l_total ::= TOTAL DOPUNTO o_decimal PUNTOCOMA 
            {
              Object RESULT =null;
		int numTotalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int numTotalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double numTotal = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		errorRepeticion = !grafica.controlTotal(); grafica.setTotal(numTotal.doubleValue());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_total",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // title ::= TITULO DOPUNTO IDD PUNTOCOMA 
            {
              Object RESULT =null;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token titulo = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		try{errorRepeticion = !grafica.controTitle(); grafica.setTitulo(limpiarLexeme(titulo.getLexeme()));}catch(Exception e){e.printStackTrace();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("title",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // y_eje ::= EJEY DOPUNTO CORCHETEA n_consecutivos CORCHETEC PUNTOCOMA 
            {
              Object RESULT =null;
		try{errorRepeticion = !grafica.controValores();  System.out.println("agregando valores"+grafica.getValores().get(0));}catch(Exception e){e.printStackTrace();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("y_eje",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // x_eje ::= EJEX DOPUNTO CORCHETEA i_tems CORCHETEC PUNTOCOMA 
            {
              Object RESULT =null;
		try{errorRepeticion = !grafica.controItems();  System.out.println("agregando items "+ grafica.getItems().get(0));}catch(Exception e){e.printStackTrace();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("x_eje",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // r_extra ::= EXTRA DOPUNTO IDD PUNTOCOMA 
            {
              Object RESULT =null;
		int extraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int extraright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token extra = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		try{errorRepeticion = !grafica.controExtra(); grafica.setExtra(limpiarLexeme(extra.getLexeme()));}catch(Exception e){e.printStackTrace();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("r_extra",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // p_tipo ::= TIPO DOPUNTO PORCENTAJE PUNTOCOMA 
            {
              Object RESULT =null;
		try{errorRepeticion = grafica.controlTipo(); grafica.setEsCantidad(false); grafica.setYaTipo(true);}catch(Exception e){e.printStackTrace();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("p_tipo",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // p_tipo ::= TIPO DOPUNTO CANTIDAD PUNTOCOMA 
            {
              Object RESULT =null;
		try{errorRepeticion = grafica.controlTipo(); grafica.setEsCantidad(true); grafica.setYaTipo(true);}catch(Exception e){e.printStackTrace();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("p_tipo",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // n_consecutivos ::= o_decimal COMA n_consecutivos 
            {
              Object RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double numero = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		try{grafica.getValores().add(numero.doubleValue());}catch(Exception e){e.printStackTrace();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("n_consecutivos",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // n_consecutivos ::= o_decimal 
            {
              Object RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double numero = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		try{grafica.getValores().add(numero.doubleValue());}catch(Exception e){e.printStackTrace();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("n_consecutivos",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // i_tems ::= IDD COMA i_tems 
            {
              Object RESULT =null;
		int itemleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token item = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		try{grafica.getItems().add(limpiarLexeme(item.getLexeme()));}catch(Exception e){e.printStackTrace();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i_tems",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // i_tems ::= IDD 
            {
              Object RESULT =null;
		int itemleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token item = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		try{grafica.getItems().add(limpiarLexeme(item.getLexeme()));}catch(Exception e){e.printStackTrace();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i_tems",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // i_tems ::= error i_tems 
            {
              Object RESULT =null;
		/* capturar error @overide, recuperacion*/
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i_tems",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // f_ejecutar ::= EJECUTAR PARENTESISA IDD PARENTESISC PUNTOCOMA f_ejecutar 
            {
              Object RESULT =null;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token titulo = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		try{listGraficasEjecucion.add(limpiarLexeme(titulo.getLexeme()));}catch(Exception e){e.printStackTrace();} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("f_ejecutar",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // f_ejecutar ::= 
            {
              Object RESULT =null;
		try{contGraficos = new ContGraficos(contadorBarra, contadorPie); grafica.unionErroresLexiconConSintacticos(LexerAnalysis.errorsSinLexs,errorsSinLexs );}catch(Exception e){e.printStackTrace();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("f_ejecutar",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operation ::= operation MAS operation 
            {
              Integer RESULT =null;
		int numero1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numero1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer numero1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token operador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numero2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numero2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer numero2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		try{RESULT = new Integer(numero1.intValue()+numero2.intValue()); operations.add(new Suma("SUMA",operador.getLine(),operador.getColumn(),String.valueOf(numero1+"+"+numero2)));}catch(Exception e){e.printStackTrace();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operation ::= operation MENOS operation 
            {
              Integer RESULT =null;
		int numero1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numero1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer numero1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token operador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numero2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numero2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer numero2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		try{RESULT = new Integer(numero1.intValue()-numero2.intValue()); operations.add(new Resta("RESTA",operador.getLine(),operador.getColumn(),String.valueOf(numero1+"-"+numero2)));         }catch(Exception e){e.printStackTrace();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operation ::= operation POR operation 
            {
              Integer RESULT =null;
		int numero1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numero1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer numero1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token operador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numero2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numero2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer numero2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		try{RESULT = new Integer(numero1.intValue()*numero2.intValue()); operations.add(new Multiplicacion("MULTIPLICACION",operador.getLine(),operador.getColumn(),String.valueOf(numero1+"/"+numero2)));}catch(Exception e){e.printStackTrace();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // operation ::= operation DIVISION operation 
            {
              Integer RESULT =null;
		int numero1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numero1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer numero1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token operador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numero2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numero2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer numero2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		try{RESULT = new Integer(numero1.intValue()/numero2.intValue()); operations.add(new Division("DIVISION",operador.getLine(),operador.getColumn(),String.valueOf(numero1+"*"+numero2)));      }catch(Exception e){e.printStackTrace();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // operation ::= NUMERO 
            {
              Integer RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token num = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		try{RESULT = Integer.valueOf( num.getLexeme());}catch(Exception e){e.printStackTrace();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // operation ::= PARENTESISA operation PARENTESISC 
            {
              Integer RESULT =null;
		int operacionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operacionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer operacion = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		try{RESULT = operacion;}catch(Exception e){e.printStackTrace();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // operation ::= error operation 
            {
              Integer RESULT =null;
		/*error */
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // o_decimal ::= o_decimal MAS o_decimal 
            {
              Double RESULT =null;
		int numero1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numero1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double numero1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token operador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numero2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numero2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double numero2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		try{RESULT = new Double(numero1.doubleValue()+numero2.doubleValue()); operations.add(new Suma("SUMA",operador.getLine(),operador.getColumn(),String.valueOf(numero1+"+"+numero2)));}catch(Exception e){e.printStackTrace();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o_decimal",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // o_decimal ::= o_decimal MENOS o_decimal 
            {
              Double RESULT =null;
		int numero1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numero1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double numero1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token operador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numero2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numero2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double numero2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		try{RESULT = new Double(numero1.doubleValue()-numero2.doubleValue()); operations.add(new Resta("RESTA",operador.getLine(),operador.getColumn(),String.valueOf(numero1+"-"+numero2)));}catch(Exception e){e.printStackTrace();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o_decimal",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // o_decimal ::= o_decimal POR o_decimal 
            {
              Double RESULT =null;
		int numero1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numero1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double numero1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token operador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numero2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numero2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double numero2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		try{RESULT = new Double(numero1.doubleValue()*numero2.doubleValue()); operations.add(new Multiplicacion("MULTIPLICACION",operador.getLine(),operador.getColumn(),String.valueOf(numero1+"*"+numero2)));}catch(Exception e){e.printStackTrace();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o_decimal",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // o_decimal ::= o_decimal DIVISION o_decimal 
            {
              Double RESULT =null;
		int numero1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numero1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double numero1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token operador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numero2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numero2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double numero2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		try{RESULT = new Double(numero1.doubleValue()/numero2.doubleValue()); operations.add(new Division("DIVISION",operador.getLine(),operador.getColumn(),String.valueOf(numero1+"/"+numero2)));}catch(Exception e){e.printStackTrace();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o_decimal",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // o_decimal ::= NUMERO 
            {
              Double RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token num = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		try{RESULT = Double.valueOf( num.getLexeme());}catch(Exception e){e.printStackTrace();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o_decimal",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // o_decimal ::= DECIMAL 
            {
              Double RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token num = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		try{RESULT = Double.valueOf( num.getLexeme());}catch(Exception e){e.printStackTrace();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o_decimal",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // o_decimal ::= PARENTESISA o_decimal PARENTESISC 
            {
              Double RESULT =null;
		int operacionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operacionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double operacion = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		try{RESULT = operacion;}catch(Exception e){e.printStackTrace();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o_decimal",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // o_decimal ::= error o_decimal 
            {
              Double RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o_decimal",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
