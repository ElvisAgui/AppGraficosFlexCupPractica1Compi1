
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.compiladores.graficoslexcup.analizadores;

import com.compiladores.graficoslexcup.objetos.*;
import com.compiladores.graficoslexcup.report.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\070\000\002\002\004\000\002\002\010\000\002\002" +
    "\010\000\002\002\010\000\002\002\010\000\002\002\003" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\002\000\002" +
    "\004\004\000\002\004\004\000\002\004\004\000\002\004" +
    "\004\000\002\004\004\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\002\000\002\012\010\000" +
    "\002\011\010\000\002\007\010\000\002\021\011\000\002" +
    "\021\007\000\002\021\004\000\002\017\006\000\002\005" +
    "\006\000\002\006\010\000\002\010\010\000\002\020\006" +
    "\000\002\013\006\000\002\013\006\000\002\015\005\000" +
    "\002\015\003\000\002\016\005\000\002\016\003\000\002" +
    "\016\004\000\002\014\010\000\002\014\002\000\002\022" +
    "\005\000\002\022\005\000\002\022\005\000\002\022\005" +
    "\000\002\022\003\000\002\022\005\000\002\022\004\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\003\000\002\023\003\000\002\023" +
    "\005\000\002\023\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\217\000\006\003\004\023\005\001\002\000\004\002" +
    "\ufffc\001\002\000\006\024\010\025\011\001\002\000\004" +
    "\002\007\001\002\000\004\002\001\001\002\000\004\012" +
    "\167\001\002\000\004\012\012\001\002\000\024\003\023" +
    "\013\uffed\026\015\031\027\032\022\035\026\036\024\037" +
    "\021\040\032\001\002\000\024\003\023\013\uffed\026\015" +
    "\031\027\032\022\035\026\036\024\037\021\040\032\001" +
    "\002\000\004\013\155\001\002\000\004\020\152\001\002" +
    "\000\024\003\023\013\uffed\026\015\031\027\032\022\035" +
    "\026\036\024\037\021\040\032\001\002\000\024\003\023" +
    "\013\uffed\026\015\031\027\032\022\035\026\036\024\037" +
    "\021\040\032\001\002\000\024\003\023\013\uffed\026\015" +
    "\031\027\032\022\035\026\036\024\037\021\040\032\001" +
    "\002\000\004\020\125\001\002\000\004\020\115\001\002" +
    "\000\024\003\023\013\uffed\026\015\031\027\032\022\035" +
    "\026\036\024\037\021\040\032\001\002\000\004\020\107" +
    "\001\002\000\024\003\023\013\uffed\026\015\031\027\032" +
    "\022\035\026\036\024\037\021\040\032\001\002\000\004" +
    "\020\052\001\002\000\004\020\040\001\002\000\024\003" +
    "\023\013\uffed\026\015\031\027\032\022\035\026\036\024" +
    "\037\021\040\032\001\002\000\024\003\023\013\uffed\026" +
    "\015\031\027\032\022\035\026\036\024\037\021\040\032" +
    "\001\002\000\004\020\033\001\002\000\004\042\034\001" +
    "\002\000\004\017\035\001\002\000\024\003\uffe2\013\uffe2" +
    "\026\uffe2\031\uffe2\032\uffe2\035\uffe2\036\uffe2\037\uffe2\040" +
    "\uffe2\001\002\000\004\013\ufff0\001\002\000\004\013\ufff4" +
    "\001\002\000\004\014\041\001\002\000\006\003\042\042" +
    "\044\001\002\000\006\003\042\042\044\001\002\000\004" +
    "\015\047\001\002\000\006\015\uffdc\016\045\001\002\000" +
    "\006\003\042\042\044\001\002\000\004\015\uffdd\001\002" +
    "\000\004\017\050\001\002\000\024\003\uffec\013\uffec\026" +
    "\uffec\031\uffec\032\uffec\035\uffec\036\uffec\037\uffec\040\uffec" +
    "\001\002\000\004\015\uffdb\001\002\000\004\014\053\001" +
    "\002\000\006\003\054\012\055\001\002\000\006\003\054" +
    "\012\055\001\002\000\010\003\064\010\061\021\062\001" +
    "\002\000\004\015\057\001\002\000\004\017\060\001\002" +
    "\000\030\003\uffea\013\uffea\026\uffea\027\uffea\030\uffea\031" +
    "\uffea\032\uffea\035\uffea\036\uffea\037\uffea\040\uffea\001\002" +
    "\000\010\003\064\010\061\021\062\001\002\000\022\004" +
    "\uffd4\005\uffd4\006\uffd4\007\uffd4\011\uffd4\013\uffd4\015\uffd4" +
    "\016\uffd4\001\002\000\014\004\070\005\071\006\066\007" +
    "\067\016\076\001\002\000\010\003\064\010\061\021\062" +
    "\001\002\000\022\004\070\005\071\006\066\007\067\011" +
    "\uffd2\013\uffd2\015\uffd2\016\uffd2\001\002\000\010\003\064" +
    "\010\061\021\062\001\002\000\010\003\064\010\061\021" +
    "\062\001\002\000\010\003\064\010\061\021\062\001\002" +
    "\000\010\003\064\010\061\021\062\001\002\000\022\004" +
    "\uffd8\005\uffd8\006\066\007\067\011\uffd8\013\uffd8\015\uffd8" +
    "\016\uffd8\001\002\000\022\004\uffd7\005\uffd7\006\066\007" +
    "\067\011\uffd7\013\uffd7\015\uffd7\016\uffd7\001\002\000\022" +
    "\004\uffd5\005\uffd5\006\uffd5\007\uffd5\011\uffd5\013\uffd5\015" +
    "\uffd5\016\uffd5\001\002\000\022\004\uffd6\005\uffd6\006\uffd6" +
    "\007\uffd6\011\uffd6\013\uffd6\015\uffd6\016\uffd6\001\002\000" +
    "\010\003\064\010\061\021\062\001\002\000\014\004\070" +
    "\005\071\006\066\007\067\013\100\001\002\000\006\015" +
    "\uffe8\016\101\001\002\000\006\003\054\012\055\001\002" +
    "\000\004\015\uffe9\001\002\000\014\004\070\005\071\006" +
    "\066\007\067\011\104\001\002\000\022\004\uffd3\005\uffd3" +
    "\006\uffd3\007\uffd3\011\uffd3\013\uffd3\015\uffd3\016\uffd3\001" +
    "\002\000\004\015\uffe7\001\002\000\004\013\ufff5\001\002" +
    "\000\006\033\110\034\111\001\002\000\004\017\113\001" +
    "\002\000\004\017\112\001\002\000\024\003\uffe1\013\uffe1" +
    "\026\uffe1\031\uffe1\032\uffe1\035\uffe1\036\uffe1\037\uffe1\040" +
    "\uffe1\001\002\000\024\003\uffe0\013\uffe0\026\uffe0\031\uffe0" +
    "\032\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\001\002\000" +
    "\004\013\uffee\001\002\000\004\014\116\001\002\000\010" +
    "\003\064\010\061\021\062\001\002\000\016\004\070\005" +
    "\071\006\066\007\067\015\uffde\016\123\001\002\000\004" +
    "\015\121\001\002\000\004\017\122\001\002\000\024\003" +
    "\uffeb\013\uffeb\026\uffeb\031\uffeb\032\uffeb\035\uffeb\036\uffeb" +
    "\037\uffeb\040\uffeb\001\002\000\010\003\064\010\061\021" +
    "\062\001\002\000\004\015\uffdf\001\002\000\012\003\131" +
    "\010\130\021\126\022\132\001\002\000\016\004\uffcd\005" +
    "\uffcd\006\uffcd\007\uffcd\011\uffcd\017\uffcd\001\002\000\014" +
    "\004\136\005\137\006\134\007\135\017\146\001\002\000" +
    "\012\003\131\010\130\021\126\022\132\001\002\000\012" +
    "\003\131\010\130\021\126\022\132\001\002\000\016\004" +
    "\uffcc\005\uffcc\006\uffcc\007\uffcc\011\uffcc\017\uffcc\001\002" +
    "\000\016\004\136\005\137\006\134\007\135\011\uffca\017" +
    "\uffca\001\002\000\012\003\131\010\130\021\126\022\132" +
    "\001\002\000\012\003\131\010\130\021\126\022\132\001" +
    "\002\000\012\003\131\010\130\021\126\022\132\001\002" +
    "\000\012\003\131\010\130\021\126\022\132\001\002\000" +
    "\016\004\uffd1\005\uffd1\006\134\007\135\011\uffd1\017\uffd1" +
    "\001\002\000\016\004\uffd0\005\uffd0\006\134\007\135\011" +
    "\uffd0\017\uffd0\001\002\000\016\004\uffce\005\uffce\006\uffce" +
    "\007\uffce\011\uffce\017\uffce\001\002\000\016\004\uffcf\005" +
    "\uffcf\006\uffcf\007\uffcf\011\uffcf\017\uffcf\001\002\000\014" +
    "\004\136\005\137\006\134\007\135\011\145\001\002\000" +
    "\016\004\uffcb\005\uffcb\006\uffcb\007\uffcb\011\uffcb\017\uffcb" +
    "\001\002\000\024\003\uffe6\013\uffe6\026\uffe6\031\uffe6\032" +
    "\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\001\002\000\004" +
    "\013\ufff1\001\002\000\004\013\uffef\001\002\000\004\013" +
    "\ufff2\001\002\000\004\042\153\001\002\000\004\017\154" +
    "\001\002\000\030\003\uffe5\013\uffe5\026\uffe5\027\uffe5\030" +
    "\uffe5\031\uffe5\032\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5" +
    "\001\002\000\012\002\uffd9\003\004\023\005\041\157\001" +
    "\002\000\004\002\ufffe\001\002\000\004\010\161\001\002" +
    "\000\004\002\uffff\001\002\000\004\042\162\001\002\000" +
    "\004\011\163\001\002\000\004\017\164\001\002\000\006" +
    "\002\uffd9\041\157\001\002\000\004\002\uffda\001\002\000" +
    "\004\013\ufff3\001\002\000\016\003\174\013\ufff6\026\015" +
    "\027\171\030\170\035\026\001\002\000\004\020\215\001" +
    "\002\000\004\020\210\001\002\000\016\003\174\013\ufff6" +
    "\026\015\027\171\030\170\035\026\001\002\000\016\003" +
    "\174\013\ufff6\026\015\027\171\030\170\035\026\001\002" +
    "\000\016\003\174\013\ufff6\026\015\027\171\030\170\035" +
    "\026\001\002\000\016\003\174\013\ufff6\026\015\027\171" +
    "\030\170\035\026\001\002\000\004\013\201\001\002\000" +
    "\016\003\174\013\ufff6\026\015\027\171\030\170\035\026" +
    "\001\002\000\004\013\ufff9\001\002\000\012\002\uffd9\003" +
    "\004\023\005\041\157\001\002\000\004\002\ufffd\001\002" +
    "\000\004\002\000\001\002\000\004\013\ufffb\001\002\000" +
    "\004\013\ufff7\001\002\000\004\013\ufff8\001\002\000\004" +
    "\013\ufffa\001\002\000\004\014\211\001\002\000\006\003" +
    "\042\042\044\001\002\000\004\015\213\001\002\000\004" +
    "\017\214\001\002\000\016\003\uffe3\013\uffe3\026\uffe3\027" +
    "\uffe3\030\uffe3\035\uffe3\001\002\000\004\014\216\001\002" +
    "\000\010\003\064\010\061\021\062\001\002\000\004\015" +
    "\220\001\002\000\004\017\221\001\002\000\016\003\uffe4" +
    "\013\uffe4\026\uffe4\027\uffe4\030\uffe4\035\uffe4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\217\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\004\013\005\024\007" +
    "\030\011\015\012\012\013\027\017\017\020\016\001\001" +
    "\000\022\004\165\005\024\007\030\011\015\012\012\013" +
    "\027\017\017\020\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\004\150\005\024\007\030\011\015\012" +
    "\012\013\027\017\017\020\016\001\001\000\022\004\147" +
    "\005\024\007\030\011\015\012\012\013\027\017\017\020" +
    "\016\001\001\000\022\004\146\005\024\007\030\011\015" +
    "\012\012\013\027\017\017\020\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\004\113\005\024\007\030" +
    "\011\015\012\012\013\027\017\017\020\016\001\001\000" +
    "\002\001\001\000\022\004\105\005\024\007\030\011\015" +
    "\012\012\013\027\017\017\020\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\004\036\005\024\007\030" +
    "\011\015\012\012\013\027\017\017\020\016\001\001\000" +
    "\022\004\035\005\024\007\030\011\015\012\012\013\027" +
    "\017\017\020\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\042\001" +
    "\001\000\004\016\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\055\001\001\000\004\021\104\001" +
    "\001\000\004\022\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\064\001\001" +
    "\000\002\001\001\000\004\022\074\001\001\000\004\022" +
    "\073\001\001\000\004\022\072\001\001\000\004\022\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\117\022" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\015\123\022\116\001" +
    "\001\000\002\001\001\000\004\023\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\143\001\001\000" +
    "\004\023\132\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\142\001\001\000\004\023\141\001\001\000" +
    "\004\023\140\001\001\000\004\023\137\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\002\157\014\155\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\164\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\175\005\174\006\171" +
    "\007\176\010\172\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\003\206\005\174\006\171\007\176\010\172" +
    "\001\001\000\014\003\205\005\174\006\171\007\176\010" +
    "\172\001\001\000\014\003\204\005\174\006\171\007\176" +
    "\010\172\001\001\000\014\003\203\005\174\006\171\007" +
    "\176\010\172\001\001\000\002\001\001\000\014\003\177" +
    "\005\174\006\171\007\176\010\172\001\001\000\002\001" +
    "\001\000\006\002\202\014\201\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\211\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\216\022\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	
	private ArrayList<Grafica> graficas=new ArrayList<>();
	private ArrayList<String> items =new ArrayList<>();
	private ArrayList<Double> valores=new ArrayList<>();
	private ArrayList<Tupla> tuplas=new ArrayList<>();
	private Grafica grafica = new Grafica();
	private boolean errorRepeticion;
	private ArrayList<ErrorSinLex> errorsSinLexs = new ArrayList<>();
	private ContGraficos contGraficos;
	private ArrayList<Operation> operations = new ArrayList<>();
	private int contadorBarra = 0;
	private int contadorPie = 0;

	 /* Connect this parser to a scanner!*/
	public parser(LexerAnalysis analizadorLexico) {
		super(analizadorLexico);
	}

	

	/*
	*apartado de getters
	*/
	public ContGraficos getContGraficos(){
		return contGraficos;
	}

	public ArrayList<Operation> getOperations() {
    	return operations;
    }

	public ArrayList<Grafica> getGraficas() {
    	return graficas;
    }
	
	public ArrayList<ErrorSinLex> getErrorsSinLexs() {
    	return errorsSinLexs;
    }

	public String limpiarLexeme(String lexeme){
		return lexeme = lexeme.replace("\"", "");
	}

	 @Override
    public List<Integer> expected_token_ids() {
        return super.expected_token_ids();
    }

	/*
	*apartado para manejo de errores
	*/

	public void reportError(String tipo){
		if(errorRepeticion){
			//reportar error repeticion 
			List<Integer> listEscape=expected_token_ids();
			String descripcion = "este elemento esta repetido: "+ sym.terminalNames[listEscape.get(0)];
			errorsSinLexs.add(new ErrorSinLex(tipo,0,0,descripcion, true));
			errorRepeticion = false;
		}
	}

	public void reportErrorElementFaltante(String tipo){
		if(errorRepeticion){
			//reportar error repeticion 
			List<Integer> listEscape=expected_token_ids();
			String descripcion = "Grafica con datos faltantes: "+ sym.terminalNames[listEscape.get(0)];
			errorsSinLexs.add(new ErrorSinLex(tipo,0,0, descripcion, true));
			errorRepeticion = false;
		}
	}

	@Override
        public void syntax_error(Symbol tok) {
			Token token = (Token) tok.value;
			List<Integer> listEscape=expected_token_ids();
			String descripcion = "Se esperaba "+ sym.terminalNames[listEscape.get(0)];
			errorsSinLexs.add(new ErrorSinLex(token.getLexeme(), token.getLine(), token.getColumn(), descripcion, true));
		}

	


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= q_inicial EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // q_inicial ::= DEF BARRAS SIGNO_LLAVEA a_barra SIGNO_LLAVEC q_inicial 
            {
              Object RESULT =null;
		graficas.add(grafica.convertGrafica(true));  grafica.limpiarGrafica(); contadorBarra++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("q_inicial",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // q_inicial ::= DEF PIE SIGNO_LLAVEA b_pie SIGNO_LLAVEC q_inicial 
            {
              Object RESULT =null;
		graficas.add(grafica.convertGrafica(false)); grafica.limpiarGrafica(); contadorPie++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("q_inicial",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // q_inicial ::= DEF PIE SIGNO_LLAVEA b_pie SIGNO_LLAVEC f_ejecutar 
            {
              Object RESULT =null;
		graficas.add(grafica.convertGrafica(false)); grafica.limpiarGrafica(); contadorPie++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("q_inicial",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // q_inicial ::= DEF BARRAS SIGNO_LLAVEA a_barra SIGNO_LLAVEC f_ejecutar 
            {
              Object RESULT =null;
		graficas.add(grafica.convertGrafica(true));  grafica.limpiarGrafica();  contadorBarra++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("q_inicial",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // q_inicial ::= error 
            {
              Object RESULT =null;
		/* capturar error @overide, recuperacion*/
              CUP$parser$result = parser.getSymbolFactory().newSymbol("q_inicial",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // a_barra ::= title a_barra 
            {
              Object RESULT =null;
		reportError("Titulo");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a_barra",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // a_barra ::= y_eje a_barra 
            {
              Object RESULT =null;
		reportError("ejey");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a_barra",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // a_barra ::= unir a_barra 
            {
              Object RESULT =null;
		reportError("unir");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a_barra",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // a_barra ::= x_eje a_barra 
            {
              Object RESULT =null;
		reportError("ejex");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a_barra",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // a_barra ::= error a_barra 
            {
              Object RESULT =null;
		/* capturar error @overide, recuperacion*/
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a_barra",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // a_barra ::= 
            {
              Object RESULT =null;
		errorRepeticion = !grafica.veriricaionElementosBarra(); reportErrorElementFaltante("Barra");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a_barra",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // b_pie ::= title b_pie 
            {
              Object RESULT =null;
		reportError("Titulo");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("b_pie",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // b_pie ::= p_tipo b_pie 
            {
              Object RESULT =null;
		reportError("Titulo");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("b_pie",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // b_pie ::= etiquet b_pie 
            {
              Object RESULT =null;
		reportError("Titulo");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("b_pie",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // b_pie ::= val b_pie 
            {
              Object RESULT =null;
		reportError("Titulo");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("b_pie",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // b_pie ::= l_total b_pie 
            {
              Object RESULT =null;
		reportError("Titulo");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("b_pie",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // b_pie ::= unir b_pie 
            {
              Object RESULT =null;
		reportError("Titulo");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("b_pie",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // b_pie ::= r_extra b_pie 
            {
              Object RESULT =null;
		reportError("Titulo");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("b_pie",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // b_pie ::= error b_pie 
            {
              Object RESULT =null;
		/* capturar error @overide, recuperacion*/
              CUP$parser$result = parser.getSymbolFactory().newSymbol("b_pie",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // b_pie ::= 
            {
              Object RESULT =null;
		errorRepeticion = !grafica.veriricaionElementosPie(); reportErrorElementFaltante("Pie");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("b_pie",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // etiquet ::= ETIQUETAS SIGNO_DOPUNTO SIGNO_CORCHETEA i_tems SIGNO_CORCHETEC SIGNO_PUNTOCOMA 
            {
              Object RESULT =null;
		errorRepeticion = !grafica.controItems(); grafica.setItems(items); items.clear();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquet",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // val ::= VALORES SIGNO_DOPUNTO SIGNO_CORCHETEA n_consecutivos SIGNO_CORCHETEC SIGNO_PUNTOCOMA 
            {
              Object RESULT =null;
		errorRepeticion = !grafica.controValores(); grafica.setValores(valores); valores.clear();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // unir ::= UNIR SIGNO_DOPUNTO SIGNO_CORCHETEA h_tupla SIGNO_CORCHETEC SIGNO_PUNTOCOMA 
            {
              Object RESULT =null;
		errorRepeticion =! grafica.controTuplas(); grafica.setTuplas(tuplas); tuplas.clear();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unir",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // h_tupla ::= SIGNO_LLAVEA operation SIGNO_COMA operation SIGNO_LLAVEC SIGNO_COMA h_tupla 
            {
              Object RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer valor1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer valor2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		tuplas.add(new Tupla(valor1, valor2));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("h_tupla",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // h_tupla ::= SIGNO_LLAVEA operation SIGNO_COMA operation SIGNO_LLAVEC 
            {
              Object RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer valor1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer valor2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		tuplas.add(new Tupla(valor1, valor2));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("h_tupla",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // h_tupla ::= error h_tupla 
            {
              Object RESULT =null;
		/* capturar error @overide, recuperacion*/
              CUP$parser$result = parser.getSymbolFactory().newSymbol("h_tupla",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // l_total ::= TOTAL SIGNO_DOPUNTO o_decimal SIGNO_PUNTOCOMA 
            {
              Object RESULT =null;
		int numTotalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int numTotalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer numTotal = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		errorRepeticion = !grafica.controlTotal(); grafica.setTotal(numTotal.doubleValue());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_total",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // title ::= TITULO SIGNO_DOPUNTO IDD_COMILLAS SIGNO_PUNTOCOMA 
            {
              Object RESULT =null;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token titulo = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		errorRepeticion = !grafica.controTitle(); grafica.setTitulo(limpiarLexeme(titulo.getLexeme()));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("title",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // y_eje ::= EJEY SIGNO_DOPUNTO SIGNO_CORCHETEA n_consecutivos SIGNO_CORCHETEC SIGNO_PUNTOCOMA 
            {
              Object RESULT =null;
		grafica.setValores(valores); valores.clear();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("y_eje",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // x_eje ::= EJEX SIGNO_DOPUNTO SIGNO_CORCHETEA i_tems SIGNO_CORCHETEC SIGNO_PUNTOCOMA 
            {
              Object RESULT =null;
		errorRepeticion = !grafica.controItems(); grafica.setItems(items); items.clear();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("x_eje",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // r_extra ::= EXTRA SIGNO_DOPUNTO IDD_COMILLAS SIGNO_PUNTOCOMA 
            {
              Object RESULT =null;
		int extraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int extraright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token extra = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		errorRepeticion = !grafica.controExtra(); grafica.setExtra(limpiarLexeme(extra.getLexeme()));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("r_extra",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // p_tipo ::= TIPO SIGNO_DOPUNTO PORCENTAJE SIGNO_PUNTOCOMA 
            {
              Object RESULT =null;
		errorRepeticion = !grafica.controlTipo(); grafica.setEsCantidad(false); grafica.setYaTipo(true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("p_tipo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // p_tipo ::= TIPO SIGNO_DOPUNTO CANTIDAD SIGNO_PUNTOCOMA 
            {
              Object RESULT =null;
		errorRepeticion = !grafica.controlTipo(); grafica.setEsCantidad(true); grafica.setYaTipo(true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("p_tipo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // n_consecutivos ::= operation SIGNO_COMA n_consecutivos 
            {
              Object RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer numero = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		valores.add(numero.doubleValue());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("n_consecutivos",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // n_consecutivos ::= operation 
            {
              Object RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer numero = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		valores.add(numero.doubleValue());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("n_consecutivos",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // i_tems ::= IDD_COMILLAS SIGNO_COMA i_tems 
            {
              Object RESULT =null;
		int itemleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token item = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		items.add(limpiarLexeme(item.getLexeme()));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i_tems",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // i_tems ::= IDD_COMILLAS 
            {
              Object RESULT =null;
		int itemleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token item = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		items.add(limpiarLexeme(item.getLexeme()));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i_tems",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // i_tems ::= error i_tems 
            {
              Object RESULT =null;
		/* capturar error @overide, recuperacion*/
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i_tems",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // f_ejecutar ::= EJECUTAR SIGNO_PARENTESISA IDD_COMILLAS SIGNO_PARENTESISC SIGNO_PUNTOCOMA f_ejecutar 
            {
              Object RESULT =null;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token titulo = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		grafica.activarEjecucion(graficas, limpiarLexeme(titulo.getLexeme()));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("f_ejecutar",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // f_ejecutar ::= 
            {
              Object RESULT =null;
		contGraficos = new ContGraficos(contadorBarra, contadorPie); grafica.unionErroresLexiconConSintacticos(LexerAnalysis.errorsSinLexs,errorsSinLexs );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("f_ejecutar",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // operation ::= operation SIGNO_MAS operation 
            {
              Integer RESULT =null;
		int numero1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numero1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer numero1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token operador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numero2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numero2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer numero2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Integer(numero1.intValue()+numero2.intValue()); operations.add(new Suma("SUMA",operador.getLine(),operador.getColumn(),String.valueOf(numero1+"+"+numero2)));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // operation ::= operation SIGNO_MENOS operation 
            {
              Integer RESULT =null;
		int numero1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numero1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer numero1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token operador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numero2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numero2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer numero2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Integer(numero1.intValue()-numero2.intValue()); operations.add(new Suma("SUMA",operador.getLine(),operador.getColumn(),String.valueOf(numero1+"-"+numero2)));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operation ::= operation SIGNO_POR operation 
            {
              Integer RESULT =null;
		int numero1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numero1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer numero1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token operador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numero2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numero2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer numero2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Integer(numero1.intValue()*numero2.intValue()); operations.add(new Suma("SUMA",operador.getLine(),operador.getColumn(),String.valueOf(numero1+"/"+numero2)));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operation ::= operation SIGNO_DIVISION operation 
            {
              Integer RESULT =null;
		int numero1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numero1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer numero1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token operador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numero2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numero2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer numero2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Integer(numero1.intValue()/numero2.intValue()); operations.add(new Suma("SUMA",operador.getLine(),operador.getColumn(),String.valueOf(numero1+"*"+numero2)));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operation ::= NUMERO 
            {
              Integer RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token num = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Integer.valueOf( num.getLexeme());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // operation ::= SIGNO_PARENTESISA operation SIGNO_PARENTESISC 
            {
              Integer RESULT =null;
		int operacionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operacionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer operacion = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = operacion;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // operation ::= error operation 
            {
              Integer RESULT =null;
		/*error */
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // o_decimal ::= o_decimal SIGNO_MAS o_decimal 
            {
              Integer RESULT =null;
		int numero1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numero1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer numero1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token operador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numero2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numero2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer numero2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Integer(numero1.intValue()+numero2.intValue()); operations.add(new Suma("SUMA",operador.getLine(),operador.getColumn(),String.valueOf(numero1+"+"+numero2)));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o_decimal",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // o_decimal ::= o_decimal SIGNO_MENOS o_decimal 
            {
              Integer RESULT =null;
		int numero1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numero1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer numero1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token operador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numero2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numero2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer numero2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Integer(numero1.intValue()-numero2.intValue()); operations.add(new Suma("SUMA",operador.getLine(),operador.getColumn(),String.valueOf(numero1+"-"+numero2)));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o_decimal",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // o_decimal ::= o_decimal SIGNO_POR o_decimal 
            {
              Integer RESULT =null;
		int numero1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numero1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer numero1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token operador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numero2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numero2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer numero2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Integer(numero1.intValue()*numero2.intValue()); operations.add(new Suma("SUMA",operador.getLine(),operador.getColumn(),String.valueOf(numero1+"*"+numero2)));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o_decimal",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // o_decimal ::= o_decimal SIGNO_DIVISION o_decimal 
            {
              Integer RESULT =null;
		int numero1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numero1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer numero1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token operador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numero2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numero2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer numero2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Integer(numero1.intValue()/numero2.intValue()); operations.add(new Suma("SUMA",operador.getLine(),operador.getColumn(),String.valueOf(numero1+"/"+numero2)));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o_decimal",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // o_decimal ::= NUMERO 
            {
              Integer RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token num = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Integer.valueOf( num.getLexeme());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o_decimal",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // o_decimal ::= DECIMAL 
            {
              Integer RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token num = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Integer.valueOf( num.getLexeme());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o_decimal",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // o_decimal ::= SIGNO_PARENTESISA o_decimal SIGNO_PARENTESISC 
            {
              Integer RESULT =null;
		int operacionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operacionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer operacion = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = operacion;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o_decimal",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // o_decimal ::= error o_decimal 
            {
              Integer RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o_decimal",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
